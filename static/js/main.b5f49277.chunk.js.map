{"version":3,"sources":["reducers/reducer_csv_url.js","reducers/reducer_vectors_on_map.js","reducers/reducer_file_suffix.js","reducers/index.js","components/Footer/index.js","components/Map/Control.js","actions/index.js","components/Map/index.js","components/Navi/index.js","components/Plot/Legend.js","components/Plot/ToolTip.js","components/Plot/index.js","App.js","serviceWorker.js","index.js"],"names":["csvUrl","state","arguments","length","undefined","action","type","payload","vectorsOnMap","fileSuffix","rootReducer","combineReducers","Footer","react_default","a","createElement","className","href","target","React","Component","DumbControl","Control","extend","options","onOff","handleOff","onAdd","_controlDiv","DomUtil","create","this","DomEvent","disableClickPropagation","onRemove","map","off","withLeaflet","_MapControl","LeafletControl","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","props","assign","forceUpdate","leafletElement","addTo","leaflet","getContainer","ReactDOM","createPortal","children","MapControl","getCsvUrl","getVectorsOnMap","getFileSuffix","BaseLayer","LayersControl","RISK_COLOR_SCALE","RISK_COLOR_HEX","chroma","scale","colors","RISK_VALUE_RANGE","RISK_VALUE_NAME","0","1","2","3","STRESS_COLOR_SCALE","STRESS_VALUE_RANGE","SAMPLE_FILES","ECOSYSTEM_LAYER","Hramap","_this","call","mapid","coordText","maxZoom","minZoom","maxBbox","lats","lngs","vectors","vectorLength","rasters","rasterLength","rastersOnMap","colorScale","colorRange","ecosystemRiskLayer","mapRef","createRef","layerControl","mapApi","current","renderLegend","files","isSampleData","_this2","geojsonUrls","i","keys","rasterName","removeFrom","forEach","filepath","fileExt","split","pop","filenameNoExt","values","fileObj","filename","name","replace","URL","createObjectURL","startsWith","slice","setState","loadVectors","e","filepaths","onFileUpload","vectorUrls","_this3","vectorData","vectorName","vectorPath","fetch","then","response","json","data","choropleth_default","features","valueProperty","feature","properties","steps","range","mode","style","getPolygonStyle","onEachFeature","layer","popupText","vectorBbox","bbox","push","concat","toConsumableArray","updateMaxBbox","minlat","Math","min","maxlat","max","minlng","maxlng","weight","opacity","color","fillColor","fillOpacity","fieldName","fieldValue","bindPopup","vectorsToRender","includes","_categories","_this4","layerControls","categories","defineProperty","ref","defaultChecked","onClick","handleVectorLayer","bind","_loop","prefix","position","checkBoxValue","filter","raster","_this5","updatedVectorsOnMap","index","indexOf","refs","checked","splice","layerName","latlng","lat","toFixed","lng","coords","fitBounds","legend","riskValue","riskName","riskColorHex","width","height","fill","_this6","Map","id","onMouseMove","renderMouseCoords","onMouseOut","removeCoords","backgroundColor","bounds","title","aria-label","zoomToMaxBbox","TileLayer","url","attribution","renderGeojsons","addLayerControls","onChange","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","display","multiple","fileUpload","click","viewSample","ScaleControl","maxWidth","connect","dispatch","bindActionCreators","Navi","legendStyles",".legend","border","borderRadius","padding","wordBreak","marginLeft","float","textAlign",".legend li","lineHeight","paddingLeft","paddingBottom","fontSize",".legend .icon","background","left","top","marginTop","Legend","config","item","getIconColor","radium_lib","scopeSelector","rules","getList","PropTypes","array","toolTipStyles",".tooltip","paddingRight","paddingTop","ToolTip","riskPlots","showToolTip","dataToRender","colorConfig","legendColorConfig","nextProps","Papa","parse","header","download","skipEmptyLines","complete","results","convertData","csvData","habitatsOnMap","habitatsAll","row","subregion","habitatName","dataPoint","stressor","x","y","highRisk","medRisk","lowRisk","createColorConfig","palette","x_max","y_max","max_domain","lib","margin","right","bottom","axes","xTicks","yTicks","axisLabels","dotRadius","xDomainRange","yDomainRange","mouseOverHandler","mouseOutHandler","d","clientY","clientX","stressorName","conseqValue","Number","expoValue","Plot_ToolTip","Plot_Legend","createLegend","defaultParagraph","createScatterPlot","createTooltip","App","alert","window","chrome","webstore","opera","navigator","userAgent","InstallTrigger","components_Navi","components_Map","Plot","components_Footer","Boolean","location","hostname","match","store","createStore","render","es","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5f49277.chunk.js","sourcesContent":["const csvUrl = (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'CSV_UPLOADED':\r\n      return action.payload\r\n    default:\r\n      return state\r\n    }\r\n  }\r\n\r\nexport default csvUrl;\r\n","const vectorsOnMap = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'VECTORS_UPDATED':\r\n      return action.payload\r\n    default:\r\n      return state\r\n    }\r\n  }\r\n\r\nexport default vectorsOnMap;\r\n","const fileSuffix = (state = '', action) => {\r\n  switch (action.type) {\r\n    case 'SUFFIX_OBTAINED':\r\n      return action.payload\r\n    default:\r\n      return state\r\n    }\r\n  }\r\n\r\nexport default fileSuffix;\r\n","import { combineReducers } from 'redux';\r\nimport csvUrl from './reducer_csv_url';\r\nimport vectorsOnMap from './reducer_vectors_on_map';\r\nimport fileSuffix from './reducer_file_suffix';\r\n\r\nconst rootReducer = combineReducers({ csvUrl, vectorsOnMap, fileSuffix });\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer fixed-bottom\">\r\n          <h5 className='footer-text'>\r\n            <a href=\"http://data.naturalcapitalproject.org/nightly-build/invest-users-guide/html/habitat_risk_assessment.html\"\r\n            target=\"blank\">InVEST User Guide </a>\r\n            &copy;\r\n            <a href=\"https://naturalcapitalproject.stanford.edu/\" target=\"blank\">2019 Natural Capital Project</a>\r\n          </h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","// This is from https://github.com/LiveBy/react-leaflet-control/issues/27.\r\n// the codesandbox snippet by bslipek to solve the issue that the contents\r\n// of <Control> do not get rendered on initial <Map> display.\r\n\r\nimport ReactDOM from \"react-dom\";\r\nimport { MapControl, withLeaflet } from \"react-leaflet\";\r\nimport { Control, DomUtil, DomEvent } from \"leaflet\";\r\n\r\nconst DumbControl = Control.extend({\r\n  options: {\r\n    className: \"\",\r\n    onOff: \"\",\r\n    handleOff: function noop() {}\r\n  },\r\n\r\n  onAdd(/* map */) {\r\n    var _controlDiv = DomUtil.create(\"div\", this.options.className);\r\n    DomEvent.disableClickPropagation(_controlDiv);\r\n    return _controlDiv;\r\n  },\r\n\r\n  onRemove(map) {\r\n    if (this.options.onOff) {\r\n      map.off(this.options.onOff, this.options.handleOff, this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n});\r\n\r\nexport default withLeaflet(\r\n  class LeafletControl extends MapControl {\r\n    createLeafletElement(props) {\r\n      return new DumbControl(Object.assign({}, props));\r\n    }\r\n\r\n    componentDidMount() {\r\n      // Here is a little trick\r\n      this.forceUpdate();\r\n      this.leafletElement.addTo(this.props.leaflet.map);\r\n      // for leaflet 1.x\r\n      // this.leafletElement.addTo(this.context.map)\r\n    }\r\n\r\n    render() {\r\n      if (!this.leafletElement || !this.leafletElement.getContainer()) {\r\n        return null;\r\n      }\r\n      return ReactDOM.createPortal(\r\n        this.props.children,\r\n        this.leafletElement.getContainer()\r\n      );\r\n    }\r\n  }\r\n);\r\n","export const getCsvUrl = csvUrl => ({\r\n  type: 'CSV_UPLOADED',\r\n  payload: csvUrl\r\n});\r\n\r\nexport const getVectorsOnMap = vectorsOnMap => ({\r\n  type: 'VECTORS_UPDATED',\r\n  payload: vectorsOnMap\r\n});\r\n\r\nexport const getFileSuffix = fileSuffix => ({\r\n  type: 'SUFFIX_OBTAINED',\r\n  payload: fileSuffix\r\n});","import { bbox } from \"@turf/turf\"\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport chroma from \"chroma-js\";\r\nimport Choropleth from \"react-leaflet-choropleth\";\r\nimport Control from \"./Control\";\r\nimport { getCsvUrl } from \"../../actions/index\";\r\nimport { getVectorsOnMap } from \"../../actions/index\";\r\nimport { getFileSuffix } from \"../../actions/index\";\r\nimport { Map, TileLayer, LayersControl, ScaleControl } from \"react-leaflet\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./style.css\";\r\n\r\nconst { BaseLayer } = LayersControl;\r\n\r\n// Color parameters for habitat risk categories and stressors\r\nconst COLOR_STEPS = 4;\r\nconst RISK_COLOR_SCALE = ['#fff', '#aa0101'];\r\nconst RISK_COLOR_HEX = chroma.scale(RISK_COLOR_SCALE).colors(COLOR_STEPS);\r\nconst RISK_VALUE_RANGE = [0, 3]; // for getting color hex for value 0 to 3\r\nconst RISK_VALUE_NAME = {\r\n  0: 'No Score',\r\n  1: 'Low Risk',\r\n  2: 'Medium Risk',\r\n  3: 'High Risk'\r\n};\r\nconst STRESS_COLOR_SCALE = [\"#d95f0e\", \"#d95f0e\"];\r\nconst STRESS_VALUE_RANGE = [1, 1];\r\nconst RISK_FIELD_NAME = \"Risk Score\";\r\nconst STRESSOR_FIELD_NAME = \"Stressor\"\r\n\r\nconst SAMPLE_FILES = [\r\n  // Habitat risk vectors\r\n  \"RECLASS_RISK_Ecosystem.geojson\",\r\n  \"RECLASS_RISK_eelgrass.geojson\",\r\n  \"RECLASS_RISK_kelp.geojson\",\r\n  \"RECLASS_RISK_hardbottom.geojson\",\r\n  \"RECLASS_RISK_softbottom.geojson\",\r\n\r\n  // Stressor vectors\r\n  \"STRESSOR_Docks_Wharves_Marinas.geojson\",\r\n  \"STRESSOR_Finfish_Aquaculture_Comm.geojson\",\r\n  \"STRESSOR_Rec_Fishing.geojson\",\r\n  \"STRESSOR_Shellfish_Aquaculture_Comm.geojson\",\r\n\r\n  // Criteria score zonal statistics on each habitat-stressor pair\r\n  \"SUMMARY_STATISTICS.csv\"\r\n];\r\n\r\n// CSV file basename.\r\nconst CSV_BASENAME = \"SUMMARY_STATISTICS\";\r\n\r\n// We will only render raster files starting with these prefixes\r\nconst STRESSOR_PREFIX = \"STRESSOR_\"\r\nconst RISK_PREFIX = \"RECLASS_RISK_\"\r\nconst ECOSYSTEM_LAYER = \"RECLASS_RISK_Ecosystem\"\r\n\r\nclass Hramap extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      mapid: \"mapdiv\",\r\n      coordText: \"Hover mouse over the map to display coordinates.\",\r\n      maxZoom: 18,\r\n      minZoom: 2, // global scale\r\n      maxBbox: [[-90, -180], [90, 180]],\r\n      lats: [],\r\n      lngs: [],\r\n      vectors: {},\r\n      vectorLength: null,\r\n      vectorsOnMap: [],\r\n      rasters: {},\r\n      rasterLength: null,\r\n      rastersOnMap: [],\r\n      colorScale: [],\r\n      colorRange: [],\r\n      ecosystemRiskLayer: ECOSYSTEM_LAYER, // Default layer on map when user choose to view sample files\r\n      fileSuffix: \"\",\r\n    };\r\n\r\n    this.mapRef = React.createRef();\r\n    this.layerControl = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.mapApi = this.mapRef.current.leafletElement; // the Leaflet Map object\r\n    this.renderLegend();\r\n  }\r\n\r\n  // Read the target files from the event listener when users upload folder,\r\n  // read the files within the folder and set states accordingly\r\n  onFileUpload(files, isSampleData) {\r\n    let geojsonUrls = {};\r\n    // let geotiffUrls = {};\r\n    let csvUrl = null;\r\n    let fileSuffix = \"\";\r\n\r\n    // Remove preexisting rasters from map\r\n    for (let i = 0; i < Object.keys(this.state.rastersOnMap).length; i++) {\r\n      let rasterName = this.state.rastersOnMap[i];\r\n      this.state.rasters[rasterName].removeFrom(this.mapApi);\r\n    }\r\n\r\n    // If the files are uploaded by user, store them as blob URL\r\n    if (!isSampleData) {\r\n      Object.values(files).forEach( fileObj => {\r\n        let filename = fileObj.name;\r\n        let fileExt = filename.split(\".\").pop();\r\n        let filenameNoExt = filename.replace(\".\" + fileExt, \"\");\r\n\r\n        // Use URLs to reference to the blob, and push them to the dictionary\r\n        if (fileExt === \"geojson\") {\r\n          // Use createObjectURL() to return blob URL as a string\r\n          geojsonUrls[filenameNoExt] = URL.createObjectURL(fileObj);\r\n        } else if (fileExt === \"tif\") {\r\n          //! do not render rasters for now yet because output files are GeoJSON\r\n          // geotiffUrls[filenameNoExt] = URL.createObjectURL(fileObj);\r\n        } else if (\r\n            fileExt === \"csv\" & filenameNoExt.startsWith(CSV_BASENAME)) {\r\n          // Create CSV object URL\r\n          csvUrl = URL.createObjectURL(fileObj);\r\n          fileSuffix = filenameNoExt.slice(CSV_BASENAME.length);\r\n        }\r\n      });\r\n\r\n    } else {\r\n      // If users want to view sample files, save URLs of the hosted GeoJSON\r\n      // and CSV files\r\n      files.forEach( filepath => {\r\n\r\n        // Save sample file names and paths to geojsonUrls\r\n        let fileExt = filepath.split(\".\").pop();\r\n        let filenameNoExt = filepath.split(\".\")[1].split(\"/\").pop()\r\n\r\n        if (fileExt === \"geojson\") {\r\n          geojsonUrls[filenameNoExt] = filepath;\r\n        } else if (fileExt === \"csv\") {\r\n          csvUrl = filepath;\r\n        } else if (fileExt === \"tif\") {\r\n          //! do not render rasters for now yet because output files are GeoJSON\r\n          // geotiffUrls[filenameNoExt] = filepath;\r\n        }\r\n      });\r\n    }\r\n\r\n    // When all object URLs are retrieved, clean up preexisting states\r\n    // since we will update them when new data is rendered\r\n    this.setState({\r\n      vectors: {},\r\n      vectorLength: null,\r\n      vectorsOnMap: [],\r\n      rasters: {},\r\n      rasterLength: null,\r\n      rastersOnMap: [],\r\n      lats: [],\r\n      lngs: [],\r\n      maxBbox: [[-90, -180], [90, 180]],\r\n      fileSuffix: fileSuffix,\r\n      ecosystemRiskLayer: \"RECLASS_RISK_Ecosystem\" + fileSuffix,\r\n    }, () =>\r\n\r\n    { // Fetch vector data and create styled polygons from the URLs\r\n      this.loadVectors(geojsonUrls);\r\n\r\n      //! do not render rasters for now yet because output files are GeoJSON\r\n      // this.loadAndRenderRasters(geotiffUrls);\r\n    });\r\n\r\n    // Update csv url and file suffix reducers\r\n    this.props.getCsvUrl(csvUrl);\r\n    this.props.getFileSuffix(fileSuffix);\r\n  }\r\n\r\n  // Load sample files to the page when users click on the View Sample button\r\n  viewSample(e) {\r\n    const filepaths = SAMPLE_FILES.map(name => (\"./data/\" + name) );\r\n    this.onFileUpload(filepaths, true);\r\n  }\r\n\r\n  // Read GeoJSON files and save them in the vectors state.\r\n  loadVectors(vectorUrls) {\r\n    let lats = [];\r\n    let lngs = [];\r\n    let vectorData = {};\r\n\r\n    this.setState({vectorLength: Object.keys(vectorUrls).length});\r\n\r\n    Object.keys(vectorUrls).forEach( vectorName => {\r\n      // Fetch GeoJSON data via their path and store the data in vectors\r\n      let vectorPath = vectorUrls[vectorName];\r\n\r\n      fetch(vectorPath)\r\n        .then(response => response.json()) // parse the data as JSON\r\n        .then(data => {\r\n\r\n          // Get suitable color scales and field name for rendering risk and\r\n          // stressor vectors\r\n          if (data.name.startsWith(RISK_PREFIX)) {\r\n            this.setState({\r\n              colorScale: RISK_COLOR_SCALE,\r\n              colorRange: RISK_VALUE_RANGE\r\n            });\r\n          } else if (data.name.startsWith(STRESSOR_PREFIX)) {\r\n            this.setState({\r\n              colorScale: STRESS_COLOR_SCALE,\r\n              colorRange: STRESS_VALUE_RANGE\r\n            });\r\n          }\r\n\r\n          // Add gradient color to features based on the field names (either\r\n          // `Risk Score` or `stressor Potential`)\r\n          vectorData[vectorName] = (\r\n            <Choropleth\r\n              key={data.name}\r\n              data={{type: \"FeatureCollection\", features: data.features}}\r\n              valueProperty={\r\n                (feature) => {\r\n                  // Get field values of 0 to 3 given a right vector format\r\n                  if (vectorName.startsWith(RISK_PREFIX)) {\r\n                    return feature.properties[RISK_FIELD_NAME];\r\n                  } else if (vectorName.startsWith(STRESSOR_PREFIX)) {\r\n                    return feature.properties[STRESSOR_FIELD_NAME];\r\n                  }\r\n                }}\r\n              scale={this.state.colorScale}\r\n              steps={COLOR_STEPS}\r\n              range={this.state.colorRange}\r\n              mode=\"e\"  // for equidistant color mode\r\n              style={this.getPolygonStyle()}\r\n              onEachFeature={\r\n                (feature, layer) => this.popupText(feature, layer)}\r\n            />);\r\n\r\n          // Add GeoJSON bounding box to lat and long arrays\r\n          let vectorBbox = bbox(data);\r\n          lngs.push(...[vectorBbox[0], vectorBbox[2]]);\r\n          lats.push(...[vectorBbox[1], vectorBbox[3]]);\r\n\r\n          // Only set state when all vector data are loaded\r\n          if (Object.values(vectorData).length === this.state.vectorLength) {\r\n            this.setState({\r\n              // Turn on the ecosystem risk layer in the first render\r\n              vectorsOnMap: [\r\n                ...this.state.vectorsOnMap, this.state.ecosystemRiskLayer],\r\n              vectors: vectorData,\r\n              lngs: lngs,\r\n              lats: lats\r\n            }, () =>\r\n\r\n            { // Update vectorsOnMap reducer\r\n              this.props.getVectorsOnMap(this.state.vectorsOnMap);\r\n              this.updateMaxBbox();\r\n            });\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  // Calculate the union of all the bounding boxes of geojson files.\r\n  updateMaxBbox() {\r\n    if (this.state.lats.length > 0 && this.state.lngs.length > 0) {\r\n      // Calculate the min and max longitude and latitude\r\n      let minlat = Math.min(...this.state.lats),\r\n          maxlat = Math.max(...this.state.lats);\r\n      let minlng = Math.min(...this.state.lngs),\r\n          maxlng = Math.max(...this.state.lngs);\r\n      this.setState({maxBbox: [[minlat, minlng],[maxlat, maxlng]]});\r\n    }\r\n  }\r\n\r\n  // Basic style for polygons\r\n  getPolygonStyle() {\r\n    return {\r\n      weight: 0.5,\r\n      opacity: 0.8,\r\n      color: \"black\",\r\n      fillColor: \"rgba(255, 255, 255, 0)\",\r\n      fillOpacity: 0.8\r\n    };\r\n  }\r\n\r\n  // Pop up field names and values when user clicks on a GeoJSON feature\r\n  popupText(feature, layer) {\r\n    const properties = feature.properties;\r\n\r\n    // Add text to the pop-up with all the field names & values for each feature\r\n    Object.keys(properties).forEach( fieldName => {\r\n      if (fieldName === RISK_FIELD_NAME) {\r\n        let fieldValue = properties[fieldName];\r\n        layer.bindPopup(RISK_VALUE_NAME[fieldValue]);\r\n      } else {  // fieldName === STRESSOR_FIELD_NAME, just show the field name\r\n        layer.bindPopup(fieldName)\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  // Render geojson vectors based on the vectorsOnMap, whose values change\r\n  // according to the checkbox events\r\n  renderGeojsons() {\r\n    const vectors = this.state.vectors; // has all the vector data by name\r\n    const vectorsOnMap = this.state.vectorsOnMap;\r\n    let vectorsToRender = [];\r\n\r\n    Object.keys(vectors).forEach( vectorName => {\r\n      if (vectorsOnMap.includes(vectorName)) {\r\n        vectorsToRender.push(vectors[vectorName]);\r\n      }\r\n    });\r\n\r\n    return vectorsToRender;\r\n  }\r\n\r\n  // Add titles and check boxes for raster and vector layers\r\n  addLayerControls() {\r\n    // const rasters = this.state.rasters;\r\n    const vectors = this.state.vectors;\r\n    const vectorsOnMap = this.state.vectorsOnMap;\r\n    const ecosystemRiskLayer = this.state.ecosystemRiskLayer;\r\n\r\n    // Create toggle switch for Risk/stressor first\r\n    let layerControls = [];\r\n\r\n    const categories = {[RISK_PREFIX]: 'Habitat Risk', [STRESSOR_PREFIX]: 'Stressor'}\r\n\r\n    if (ecosystemRiskLayer in vectors) {\r\n      layerControls.push(\r\n        <label key={ecosystemRiskLayer}>\r\n          <div>\r\n            <input\r\n              type=\"radio\" value={ecosystemRiskLayer} ref={ecosystemRiskLayer}\r\n              className=\"leaflet-control-layers-selector\"\r\n              defaultChecked={true} // checked\r\n              onClick={this.handleVectorLayer.bind(this)}/>\r\n\r\n            <span className={\"bold-font\"}>\r\n              {ecosystemRiskLayer.replace(RISK_PREFIX, \"\") + \" Risk\"}\r\n            </span>\r\n          </div>\r\n        </label>);\r\n    }\r\n\r\n    for (let prefix in categories) {\r\n\r\n      // Add the category name to the control with its first letter capitalized\r\n      layerControls.push(\r\n        <div key={prefix} className=\"control-layer-header\">\r\n          {categories[prefix]}\r\n        </div>\r\n      );\r\n\r\n      // If vector name starts with 'RECLASS_RISK' or 'STRESSOR_', put them on\r\n      // the control box and remove the front suffix from the names\r\n      Object.keys(vectors).forEach( vectorName => {\r\n        // If layer name is in the vectorsOnMap array, set it checked\r\n        if (vectorName.startsWith(prefix) & vectorName !== ecosystemRiskLayer) {\r\n          let defaultCheck = false; // Boolean variable for setting default layer check box\r\n          if (vectorsOnMap.includes(vectorName)) {\r\n            let defaultCheck = true;\r\n          }\r\n          layerControls.push(\r\n            <label key={vectorName}>\r\n              <div>\r\n                <input\r\n                  type=\"checkbox\" value={vectorName} ref={vectorName}\r\n                  className=\"leaflet-control-layers-selector\"\r\n                  defaultChecked={defaultCheck}\r\n                  onClick={this.handleVectorLayer.bind(this)}/>\r\n                <span>\r\n                  {vectorName.replace(prefix, \"\")}\r\n                </span>\r\n              </div>\r\n            </label>);\r\n        }\r\n      });\r\n    }\r\n\r\n    // When the control has layers, not just the category names\r\n    if (layerControls.length > 2) {\r\n      return (\r\n        <Control position=\"topright\">\r\n          <div\r\n           className=\"leaflet-control-layers\r\n                      leaflet-control-layers-expanded indent-box\">\r\n            {layerControls}\r\n          </div>\r\n        </Control>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Turn raster layers on or off depending on the checkbox value\r\n  handleRasterLayer(e) {\r\n    const checkBoxValue = e.target.value;\r\n    if (this.state.rastersOnMap.includes(checkBoxValue)) {\r\n      this.setState({rastersOnMap: this.state.rastersOnMap.filter(\r\n        raster => raster !== checkBoxValue)});\r\n      this.state.rasters[checkBoxValue].removeFrom(this.mapApi);\r\n    } else {\r\n      this.setState({rastersOnMap: [\r\n        ...this.state.rastersOnMap, checkBoxValue]});\r\n      this.state.rasters[checkBoxValue].addTo(this.mapApi);\r\n    }\r\n  }\r\n\r\n  // Turn vector layers on or off depending on the checkbox value\r\n  handleVectorLayer(e) {\r\n    const checkBoxValue = e.target.value;\r\n    const vectorsOnMap = this.state.vectorsOnMap;\r\n    let updatedVectorsOnMap = [...this.state.vectorsOnMap];\r\n    const ecosystemRiskLayer = this.state.ecosystemRiskLayer;\r\n\r\n    // Turn off the layer if it's on map\r\n    if (vectorsOnMap.includes(checkBoxValue)) {\r\n      let index = updatedVectorsOnMap.indexOf(checkBoxValue);\r\n\r\n      if (checkBoxValue === ecosystemRiskLayer) {\r\n        this.refs[ecosystemRiskLayer].checked = false; // Uncheck the ecosystem layer\r\n      }\r\n\r\n      // Remove the layer from the list\r\n      if (index !== -1) {\r\n        updatedVectorsOnMap.splice(index, 1);\r\n      }\r\n\r\n    } else {\r\n      // Turn off all the other risk layers if ecosystem risk layer is checked\r\n      if (checkBoxValue === ecosystemRiskLayer) {\r\n         for (let i = updatedVectorsOnMap.length - 1; i >= 0; i--) {\r\n          let layerName = updatedVectorsOnMap[i];\r\n\r\n          if (layerName.startsWith(RISK_PREFIX)) {\r\n            let index = updatedVectorsOnMap.indexOf(layerName);\r\n            updatedVectorsOnMap.splice(index, 1);\r\n            this.refs[layerName].checked = false; // Uncheck the layer from control\r\n          }\r\n         }\r\n      } else if (vectorsOnMap.includes(ecosystemRiskLayer) &\r\n                 checkBoxValue.startsWith(RISK_PREFIX)) {\r\n        // Turn off the ecosystem layer if a habitat risk layer is checked\r\n        let index = updatedVectorsOnMap.indexOf(ecosystemRiskLayer);\r\n        updatedVectorsOnMap.splice(index, 1);\r\n        this.refs[ecosystemRiskLayer].checked = false;\r\n      }\r\n      // Turn on the layer if it's not on map\r\n      updatedVectorsOnMap.push(checkBoxValue);\r\n    }\r\n\r\n    this.setState({vectorsOnMap: updatedVectorsOnMap}, () => {\r\n      // Update vectorsOnMap reducer\r\n      this.props.getVectorsOnMap(this.state.vectorsOnMap);\r\n    });\r\n\r\n  }\r\n\r\n  // Display lat and long coordinates based on mouse event\r\n  renderMouseCoords(e) {\r\n    let coordText = \"Lat: \" + e.latlng.lat.toFixed(5) +\r\n                 \", Long: \"+e.latlng.lng.toFixed(5);\r\n    this.setState({ coordText });\r\n  }\r\n\r\n  // Remove the display of coords when mouse leaves the map\r\n  removeCoords(e) {\r\n    this.setState({coords: \"Hover mouse over the map to display coordinates.\"});\r\n  }\r\n\r\n  // Zoom to the union of bounding boxes of all layers\r\n  zoomToMaxBbox() {\r\n    this.mapApi.fitBounds(this.state.maxBbox);\r\n  }\r\n\r\n  // Display the risk and resilience legends\r\n  renderLegend() {\r\n\r\n    let legend = [];\r\n\r\n    // Risk legend\r\n    Object.keys(RISK_VALUE_NAME).forEach( riskValue => {\r\n      let riskName = RISK_VALUE_NAME[riskValue];\r\n      let riskColorHex = RISK_COLOR_HEX[riskValue];\r\n      // Set rect size here, because the rect css does not work in firefox\r\n      legend.push(\r\n        <li key={riskName}>\r\n            <svg className='legend-svg'>\r\n              <rect className='legend-svg' width='28px' height='18px'\r\n                    fill={riskColorHex}/>\r\n            </svg>\r\n            <span className='legend-text'>{riskName}</span>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    // stressor legend\r\n    legend.push(\r\n      <li key=\"stressor\">\r\n          <svg className='legend-svg'>\r\n            <rect className='legend-svg' width='28px' height='18px'\r\n                  fill={STRESS_COLOR_SCALE[0]}/>\r\n          </svg>\r\n          <span className='legend-text'>Stressor</span>\r\n      </li>\r\n    );\r\n\r\n    this.setState({ legend });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Map ref={this.mapRef} id={this.state.mapid} className=\"map\"\r\n          maxZoom={this.state.maxZoom} minZoom={this.state.minZoom}\r\n          onMouseMove={this.renderMouseCoords.bind(this)}\r\n          onMouseOut={this.removeCoords.bind(this)}\r\n          style={{backgroundColor: \"#aad3df\"}} bounds={this.state.maxBbox}>\r\n\r\n        <Control position=\"topleft\">\r\n          <button id=\"zoom-btn\" title=\"Zoom To AOI\" aria-label=\"Zoom To AOI\"\r\n            onClick={this.zoomToMaxBbox.bind(this)}>\r\n            <i className=\"fa fa-crosshairs fa-lg\"/>\r\n          </button>\r\n        </Control>\r\n\r\n        <LayersControl position=\"topleft\">\r\n          <BaseLayer name=\"Open Street Map\" checked={true}>\r\n            <TileLayer\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>\r\n                OpenStreetMap</a> contributors\" />\r\n          </BaseLayer>\r\n\r\n          <BaseLayer name=\"ESRI Ocean Map\">\r\n            <TileLayer\r\n              url=\"https://server.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer/tile/{z}/{y}/{x}\"\r\n              attribution=\"&copy;\r\n                Esri, GEBCO, NOAA, National Geographic, DeLorme, HERE, Geonames.org, and other contributors\"/>\r\n          </BaseLayer>\r\n\r\n          <BaseLayer name=\"ESRI World Imagery\">\r\n            <TileLayer\r\n              url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\r\n              attribution=\"&copy;\r\n                Esri, DigitalGlobe, Earthstar Geographics, CNES/Airbus DS,\r\n                GeoEye, USDA FSA, USGS, Aerogrid, IGN, IGP, and the GIS User Community\"/>\r\n          </BaseLayer>\r\n        </LayersControl>\r\n\r\n        {this.renderGeojsons()}\r\n\r\n        {this.addLayerControls()}\r\n\r\n        <Control position=\"topleft\">\r\n          <form className=\"leaflet-control-layers upload-form\">\r\n\r\n            Upload HRA Output Folder\r\n            <input type=\"file\" ref=\"fileUpload\"\r\n              onChange={e => this.onFileUpload(e.target.files, false)}\r\n              webkitdirectory=\"true\" mozdirectory=\"true\" msdirectory=\"true\"\r\n              odirectory=\"true\" directory=\"true\"\r\n              style={{\"display\": \"none\"}} multiple />\r\n            <br />\r\n\r\n            <input type=\"button\" value=\"Select Folder\"\r\n              onClick={e => this.refs.fileUpload.click()}/>\r\n\r\n            or View Sample\r\n            <input type=\"button\" value=\"Sample Files\"\r\n              onClick={e => this.viewSample(e)}/>\r\n          </form>\r\n\r\n        </Control>\r\n\r\n        <Control position=\"bottomleft\">\r\n          <div className=\"coords\">{this.state.coordText}</div>\r\n        </Control>\r\n\r\n        <Control position='bottomright' key='legend'>\r\n          <ul className='legend'>\r\n            {this.state.legend}\r\n          </ul>\r\n        </Control>\r\n\r\n        <ScaleControl position={\"bottomleft\"} maxWidth={100}/>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Use redux API to create csvUrl & vectorsOnMap props connected to the redux state\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    csvUrl: state.csvUrl,\r\n    vectorsOnMap: state.vectorsOnMap,\r\n    fileSuffix: state.fileSuffix,\r\n  }\r\n}\r\n\r\n// Return getCsvUrl, getVectorsOnMap & getFileSuffix callback props\r\nfunction mapDispatchToProps(dispatch) {\r\n  return bindActionCreators({ getCsvUrl, getVectorsOnMap, getFileSuffix }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Hramap);\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nclass Navi extends React.Component {\r\n  render() {\r\n    const { title } = this.props;\r\n    return (\r\n      <div className=\"navbar\">\r\n        <h1 className=\"navbar-brand\">{title}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Navi;\r\n","// Reference: https://github.com/rma-consulting/react-easy-chart/blob/master/examples/Legend.js\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Style } from 'radium';\r\n\r\n\r\nconst legendStyles = {\r\n  '.legend': {\r\n    border: 'solid silver 1px',\r\n    backgroundColor: 'rgba(255, 255, 255, 0.55)',\r\n    borderRadius: '3px',\r\n    padding: '5px',\r\n    maxWidth: '200px',\r\n    wordBreak: 'break-all',\r\n    marginLeft: '100px',  // marginRight: '150px',\r\n    float: 'left', // right\r\n    textAlign: 'left'\r\n  },\r\n  '.legend li': {\r\n    width: '80%',\r\n    lineHeight: '18px',\r\n    paddingLeft: '20px',\r\n    paddingBottom: '2px',\r\n    position: 'relative',\r\n    fontSize: '13px',\r\n    float: 'left'\r\n  },\r\n  '.legend .icon': {\r\n    width: '10px',\r\n    height: '10px',\r\n    background: 'white',\r\n    borderRadius: '6px',\r\n    position: 'absolute',\r\n    left: '3px',\r\n    top: '50%',\r\n    marginTop: '-6px',\r\n  }\r\n};\r\n\r\n\r\nclass Legend extends React.Component {\r\n\r\n  static get propTypes() {\r\n    return {\r\n      config: PropTypes.array,\r\n    };\r\n  }\r\n\r\n  getList() {\r\n    return (\r\n      this.props.config.map(\r\n        (item, index) => (\r\n          <li key={index}>\r\n            <span\r\n              className=\"icon\"\r\n              style={{ backgroundColor: this.getIconColor(index) }}\r\n            />\r\n            {item.type}\r\n          </li>\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  getIconColor(index) {\r\n    const {\r\n      config\r\n    } = this.props;\r\n\r\n    return config[index].color;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.config.length > 0) {\r\n      return (\r\n        <div className=\"legend-container\">\r\n          <Style scopeSelector=\".legend-container\" rules={legendStyles} />\r\n          <ul className=\"legend\">{this.getList()}</ul>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Legend;\r\n","// Reference: https://github.com/rma-consulting/react-easy-chart/blob/master/examples/ToolTip.js\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Style } from 'radium';\r\n\r\nconst toolTipStyles = {\r\n  '.tooltip': {\r\n    border: 'solid silver 0.5px',\r\n    position: 'absolute',\r\n    backgroundColor: 'rgba(255,255,255,0.9)',\r\n    borderRadius: '4px',\r\n    paddingLeft: '5px',\r\n    paddingRight: '5px',\r\n    paddingTop: '1px',\r\n    paddingBottom: '1px',\r\n    display: 'inline-block',\r\n    fontSize: '12px',\r\n    textAlign: 'center'\r\n  }\r\n};\r\n\r\nconst ToolTip = (props) => (\r\n  <div className=\"tooltip-container\">\r\n    <Style scopeSelector=\".tooltip-container\" rules={toolTipStyles} />\r\n    <div className=\"tooltip\" style={{ top: props.top, left: props.left }}>\r\n      {props.children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nToolTip.propTypes = {\r\n  left: PropTypes.string,\r\n  top: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default ToolTip;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Papa from 'papaparse';\r\nimport palette from 'google-palette';\r\nimport { ScatterplotChart } from 'react-easy-chart';\r\nimport Legend from './Legend';\r\nimport ToolTip from './ToolTip';\r\n\r\nimport './style.css';\r\n\r\n\r\n// Header names in stats CSV file\r\nconst HABITAT_HEADER = 'HABITAT';\r\nconst STRESSOR_HEADER = 'STRESSOR';\r\nconst EXPOSURE_HEADER = 'E_MEAN';\r\nconst CONSEQUENCE_HEADER = 'C_MEAN';\r\nconst SUBREGION_HEADER = 'SUBREGION'\r\nconst HIGH_RISK_HEADER = 'R_%HIGH';\r\nconst MED_RISK_HEADER = 'R_%MEDIUM';\r\nconst LOW_RISK_HEADER = 'R_%LOW';\r\n\r\n// Default layer on map when files are uploaded\r\nconst ECOSYSTEM_RISK_LAYER = \"RECLASS_RISK_Ecosystem\";\r\n\r\n// Prefix of risk rasters\r\nconst RISK_PREFIX = \"RECLASS_RISK_\"\r\n\r\nclass riskPlots extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      csvUrl: props.csvUrl, // provided by connect@mapStateToProps\r\n      vectorsOnMap: props.vectorsOnMap, // same as above\r\n      fileSuffix: props.fileSuffix,\r\n      showToolTip: false,\r\n      dataToRender: {},\r\n      colorConfig: [],\r\n      legendColorConfig: [],\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.csvUrl !== null & nextProps.csvUrl !== undefined) {\r\n      this.setState({\r\n         csvUrl: nextProps.csvUrl,\r\n         vectorsOnMap: nextProps.vectorsOnMap,\r\n         fileSuffix: nextProps.fileSuffix,\r\n      }, () => {\r\n        // Parse zonal statistics data from CSV\r\n        Papa.parse(nextProps.csvUrl, {\r\n          header: true,\r\n          download: true,\r\n          skipEmptyLines: true,\r\n          complete: results => this.convertData(results.data)\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // Process CSV data to dataToRender state for ScatterplotChart to render\r\n  convertData(csvData) {\r\n    // Use vectorsOnMap as a reference for what data to render\r\n    const vectorsOnMap = this.state.vectorsOnMap;\r\n    const fileSuffix = this.state.fileSuffix;\r\n\r\n    // Get a dictionary of subregions as keys and data points as values\r\n    let dataToRender = {};\r\n\r\n    // Get habitats on map in order to generate color palette in plots\r\n    let habitatsOnMap = [];\r\n\r\n    // Get a list of all the habitats\r\n    let habitatsAll = [];\r\n\r\n    Object.values(csvData).forEach( row => {\r\n      let subregion = row[SUBREGION_HEADER];\r\n      // Add suffix to habiat header, because all vector files will have\r\n      // suffix appended.\r\n      let habitatName = row[HABITAT_HEADER] + fileSuffix;\r\n\r\n      // Add habitat name to the all habitats list\r\n      if (!habitatsAll.includes(habitatName)) {\r\n        habitatsAll.push(habitatName); // add habitat name to the array\r\n      }\r\n\r\n      // Render data points for that habitat layer if it's checked or if\r\n      // ECOSYSTEM_RISK_LAYER is checked on map control\r\n      if (vectorsOnMap.includes(RISK_PREFIX + habitatName) ||\r\n          vectorsOnMap.includes(ECOSYSTEM_RISK_LAYER + fileSuffix)) {\r\n\r\n        // Add habitat name to the legend list\r\n        if (!habitatsOnMap.includes(habitatName)) {\r\n          habitatsOnMap.push(habitatName); // add habitat name to the array\r\n        }\r\n\r\n        // Add the data point for the stressor and habitat to state\r\n        let dataPoint = {\r\n          type: habitatName,\r\n          stressor: row[STRESSOR_HEADER],\r\n          x: row[EXPOSURE_HEADER],\r\n          y: row[CONSEQUENCE_HEADER],\r\n          highRisk: row[HIGH_RISK_HEADER],\r\n          medRisk: row[MED_RISK_HEADER],\r\n          lowRisk: row[LOW_RISK_HEADER]\r\n        };\r\n\r\n        // Push data to the array for the subregion key in dataToRender\r\n        if (!dataToRender[subregion]) {\r\n          dataToRender[subregion] = [dataPoint];\r\n        }\r\n        else {\r\n          dataToRender[subregion].push(dataPoint);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.setState({ dataToRender, habitatsAll, habitatsOnMap });\r\n    this.createColorConfig();\r\n  }\r\n\r\n  // Create color hexes for habitats in scatter plots and legend\r\n  createColorConfig() {\r\n    const habitatsAll = this.state.habitatsAll;\r\n    const habitatsOnMap = this.state.habitatsOnMap;\r\n\r\n    // Get Paul Tol's rainbow scheme, color-blind friendly\r\n    const colors = palette('tol', habitatsAll.length)\r\n\r\n    let colorConfig = [];\r\n    let legendColorConfig = [];\r\n\r\n    for (let i=0; i < habitatsAll.length; i++) {\r\n      let habitatName = habitatsAll[i]\r\n      // Push every habitat to the color config for plots, so the plots\r\n      // have consistent color scheme for habitats\r\n      colorConfig.push(\r\n        {\r\n          type: habitatName,\r\n          color: '#' + colors[i]\r\n        }\r\n      );\r\n\r\n      // Only push habitats that are on the map to the legend\r\n      if (habitatsOnMap.includes(habitatName)) {\r\n        legendColorConfig.push(\r\n          {\r\n            type: habitatName,\r\n            color: '#' + colors[i]\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    if (colorConfig.length === habitatsAll.length) {\r\n      this.setState({ colorConfig });\r\n      this.setState({ legendColorConfig });\r\n    }\r\n  }\r\n\r\n  createScatterPlot() {\r\n    if ( this.state.dataToRender ) {\r\n      const dataToRender = this.state.dataToRender;\r\n      const subregions = Object.keys(dataToRender);\r\n      const scatterPlots = subregions.map( subregion => {\r\n        // Find max x and y values among all the data points\r\n        const x_max = Math.max.apply(\r\n          Math, Object.values(\r\n            dataToRender[subregion]).map(dataPoint => dataPoint.x));\r\n        const y_max = Math.max.apply(\r\n          Math, Object.values(\r\n            dataToRender[subregion]).map(dataPoint => dataPoint.y));\r\n        // Make extra space for the plot by multiplying 1.1\r\n        const max_domain = Math.max(x_max, y_max) * 1.1;\r\n\r\n        return (<div key={subregion}>\r\n          <h4>{subregion}</h4>\r\n          <ScatterplotChart\r\n            key={subregion}\r\n            data={dataToRender[subregion]}\r\n            margin={{top: 10, right: 0, bottom: 25, left: 65}}\r\n            config={this.state.colorConfig}\r\n            axes\r\n            xTicks={7}\r\n            yTicks={7}\r\n            axisLabels={{x: 'Exposure', y: 'Consequence'}}\r\n            dotRadius={6}\r\n            width={400}\r\n            height={300}\r\n            xDomainRange={[0, max_domain]}\r\n            yDomainRange={[0, max_domain]}\r\n            mouseOverHandler={this.mouseOverHandler.bind(this)}\r\n            mouseOutHandler={this.mouseOutHandler.bind(this)}\r\n          />\r\n        </div>)\r\n      });\r\n\r\n      return scatterPlots\r\n    }\r\n  }\r\n\r\n  // Show tool tip on top of data point when mouse hovers over\r\n  mouseOverHandler(d, e) {\r\n    this.setState({\r\n      showToolTip: true,\r\n      top: `${e.clientY - 60}px`,\r\n      left: `${e.clientX - d.stressor.length * 3.5}px`,  // roughly center the element\r\n      habitatName: d.type,\r\n      stressorName: d.stressor,\r\n      conseqValue: Number(d.y),\r\n      expoValue: Number(d.x)\r\n    });\r\n  }\r\n\r\n  mouseOutHandler() {\r\n    this.setState({ showToolTip: false });\r\n  }\r\n\r\n  createTooltip() {\r\n    if (this.state.showToolTip) {\r\n      return (\r\n        <ToolTip top={this.state.top} left={this.state.left}>\r\n          <span className='tooltip-title'> {this.state.stressorName} </span>\r\n          <br />\r\n          <span className='tooltip-title'> {this.state.habitatName} </span>\r\n          <br />\r\n          E: {this.state.expoValue.toFixed(2)},\r\n          C: {this.state.conseqValue.toFixed(2)}\r\n\r\n        </ToolTip>\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\r\n  createLegend() {\r\n    if ( Object.values(this.state.dataToRender).length > 0 ) {\r\n      return(\r\n        <div className='legend-div'>\r\n          <Legend config={this.state.legendColorConfig} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  defaultParagraph() {\r\n    const welcomeText = \"Welcome to the Habitat Risk Assessment \" +\r\n      \"visualization platform!\"\r\n\r\n    const explainText = \"Please click on the button on the left of the map \" +\r\n       \"to upload your output data folder from the HRA model, in order to \" +\r\n       \"view the results on map and plots. You can also view sample files \" +\r\n       \"to expect what they look like.\";\r\n\r\n    if (!this.state.csvUrl) {\r\n      return (\r\n        <div className='default-p'>\r\n          <p>{welcomeText}</p>\r\n          <p>{explainText}</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='plot-container'>\r\n        <h3 className='header'>Risk Plots</h3>\r\n\r\n        {this.createLegend()}\r\n\r\n        {this.defaultParagraph()}\r\n\r\n        {this.createScatterPlot()}\r\n\r\n        {this.createTooltip()}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  csvUrl: state.csvUrl,\r\n  vectorsOnMap: state.vectorsOnMap,\r\n  fileSuffix: state.fileSuffix,\r\n});\r\n\r\nexport default connect(mapStateToProps)(riskPlots);\r\n","import React, { Component } from 'react';\r\nimport Footer from './components/Footer';\r\nimport HraMap from './components/Map';\r\nimport Navi from './components/Navi';\r\nimport Plot from './components/Plot';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super (props); // Required to call original constructor\r\n    this.state = {\r\n      title: \"Habitat Risk Assessment\"\r\n    }\r\n  }\r\n\r\n  // Alert users if browser type is not Chrome, Opera, or Firefox\r\n  checkBrowser(alert) {\r\n    // Chrome 1+\r\n    let isChrome = !!window.chrome && !!window.chrome.webstore;\r\n    // Opera 8.0+\r\n    let isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\r\n    // Firefox 1.0+\r\n    let isFirefox = typeof InstallTrigger !== 'undefined';\r\n\r\n    if (!(isChrome | isOpera | isFirefox)) {\r\n      window.alert('It is suggested to use Chrome, Opera, or Firefox to get the best performance on this web page.');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navi title={this.state.title}/>\r\n        <HraMap />\r\n        <Plot />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './reducers';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}